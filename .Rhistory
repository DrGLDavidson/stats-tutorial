axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", linewidth = 0.8),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20), # Adjust title size here
#axis.text.x = element_text(angle = 45, hjust = 0.95, vjust = 1.0),
axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
) +
labs(
title = "Weezify Fan Ratings for Black Room, Green and Maladroit Bundles",
x = "Bundle",
y = "Fan Rating"
) +
scale_color_gradient(low = "#E69762", high = "darkblue")
# guides(colour = guide_legend(override.aes = list(size = 16))) +
#scale_color_manual(values = c(
# "black", "#BECE30", "#DDAE56"
dev.off()
ggplot(df4, aes(x = bundle.x, y = fanRating, color = fanRatingCount)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.7, size = 2) +
geom_pointrange(data = meansBGM, aes(y = averageFanRating, ymin = averageFanRating - standardError, ymax = averageFanRating + standardError),
colour = "black", alpha = 1, size = 0.6) +
geom_boxplot(alpha = 0.8) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", linewidth = 0.8),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20), # Adjust title size here
#axis.text.x = element_text(angle = 45, hjust = 0.95, vjust = 1.0),
axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
) +
labs(
title = "Weezify Fan Ratings for Black Room, Green and Maladroit Bundles",
x = "Bundle",
y = "Fan Rating"
) +
scale_color_gradient(low = "#E69762", high = "darkblue")
# guides(colour = guide_legend(override.aes = list(size = 16))) +
#scale_color_manual(values = c(
# "black", "#BECE30", "#DDAE56"
# boxplot with colour gradient of number of fan ratings
tiff(file="F:/RWorkspace/GitHub/Weezify-fan-ratings/BlackGreenMalWeezifyTotalRatingBoxplots.tiff", width = 10, height = 9, units = 'in', res = 300)
ggplot(df4, aes(x = bundle.x, y = fanRating, color = fanRatingCount)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.7, size = 2) +
geom_boxplot(alpha = 0.8) +
geom_pointrange(data = meansBGM, aes(y = averageFanRating, ymin = averageFanRating - standardError, ymax = averageFanRating + standardError),
colour = "black", alpha = 1, size = 0.6) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", linewidth = 0.8),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20), # Adjust title size here
#axis.text.x = element_text(angle = 45, hjust = 0.95, vjust = 1.0),
axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
) +
labs(
title = "Weezify Fan Ratings for Black Room, Green and Maladroit Bundles",
x = "Bundle",
y = "Fan Rating"
) +
scale_color_gradient(low = "#E69762", high = "#004158")
# guides(colour = guide_legend(override.aes = list(size = 16))) +
#scale_color_manual(values = c(
# "black", "#BECE30", "#DDAE56"
dev.off()
# boxplot with colour gradient of number of fan ratings
tiff(file="F:/RWorkspace/GitHub/Weezify-fan-ratings/BlackGreenMalWeezifyTotalRatingBoxplots.tiff", width = 10, height = 9, units = 'in', res = 300)
ggplot(df4, aes(x = bundle.x, y = fanRating, color = fanRatingCount)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.7, size = 2) +
geom_boxplot(alpha = 0.8) +
geom_pointrange(data = meansBGM, aes(y = averageFanRating, ymin = averageFanRating - standardError, ymax = averageFanRating + standardError),
colour = "black", alpha = 1, size = 0.6) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", linewidth = 0.8),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20), # Adjust title size here
#axis.text.x = element_text(angle = 45, hjust = 0.95, vjust = 1.0),
axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
) +
labs(
title = "Weezify Fan Ratings for Black Room, Green and Maladroit Bundles",
x = "Bundle",
y = "Fan Rating"
) +
scale_color_gradient(low = "#E69762", high = "#02307C")
# guides(colour = guide_legend(override.aes = list(size = 16))) +
#scale_color_manual(values = c(
# "black", "#BECE30", "#DDAE56"
dev.off()
# boxplot with colour gradient of number of fan ratings
tiff(file="F:/RWorkspace/GitHub/Weezify-fan-ratings/BlackGreenMalWeezifyTotalRatingBoxplots.tiff", width = 10, height = 9, units = 'in', res = 300)
ggplot(df4, aes(x = bundle.x, y = fanRating, color = fanRatingCount)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.7, size = 3) +
geom_boxplot(alpha = 0.8) +
geom_pointrange(data = meansBGM, aes(y = averageFanRating, ymin = averageFanRating - standardError, ymax = averageFanRating + standardError),
colour = "black", alpha = 1, size = 0.6) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", linewidth = 0.8),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20), # Adjust title size here
#axis.text.x = element_text(angle = 45, hjust = 0.95, vjust = 1.0),
axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
) +
labs(
title = "Weezify Fan Ratings for Black Room, Green and Maladroit Bundles",
x = "Bundle",
y = "Fan Rating"
) +
scale_color_gradient(low = "#E69762", high = "#02307C")
# guides(colour = guide_legend(override.aes = list(size = 16))) +
#scale_color_manual(values = c(
# "black", "#BECE30", "#DDAE56"
dev.off()
df1<-read.csv("F:/RWorkspace/GitHub/Weezify-fan-ratings/data/BTO_special_methods_2024.csv", header =TRUE)
df1<-read.csv("F:/RWorkspace/GitHub/BTO-special-methods-report/BTO_special_methods_2024.csv", header =TRUE)
names(df1)
unique<-unique(df1$pitType)
dfGT<-df1%>%
filter(species=="GRETI" | pitType=="N" | pitType=="A")%>%
select(date, ring, age, sex, weight, wing, initials)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(plyr)
dfGT<-df1%>%
filter(species=="GRETI" | pitType=="N" | pitType=="A")%>%
select(date, ring, age, sex, weight, wing, initials)
dfGT<-df1%>%
filter(species=="GRETI" | pitType=="N" | pitType=="A")%>%
select(date, ringNo, age, sex, weight, wing, initials)
dfBT<-df1%>%
filter(species=="BLUTI" | pitType=="N" | pitType=="A")%>%
select(date, ringNo, age, sex, weight, wing, initials)
View(dfBT)
names(df1)
dfGT<-df1%>%
filter(species=="GRETI" | pitType=="N" | pitType=="A")%>%
select(date, ringNo, age, sex, weight, wing, initials, pittagNo, pitType, ringType)
View(dfGT)
View(dfGT)
dfGT<-df1%>%
filter(species=="GRETI" | pitType=="N" | pitType=="A")%>%
select(species, date, ringNo, age, sex, weight, wing, initials, pittagNo, pitType, ringType)
dfBT<-df1%>%
filter(species=="BLUTI" | pitType=="N" | pitType=="A")%>%
select(species, date, ringNo, age, sex, weight, wing, initials,pittagNo, pitType, ringType)
View(dfBT)
View(dfBT)
dfGT<-df1%>%
filter(species=="GRETI")
View(dfGT)
dfGT<-df1%>%
filter(species=="GRETI" | pitType=="N" )
dfGT <- df1 %>%
filter(species == "GRETI" & (pitType == "N" | pitType == "A"))%>%
select(species, date, ringNo, age, sex, weight, wing, initials, pittagNo, pitType, ringType)
dfBT<-df1%>%
filter(species=="BLUTI" & (pitType == "N" | pitType == "A"))%>%
select(species, date, ringNo, age, sex, weight, wing, initials,pittagNo, pitType, ringType)
totalEncounters<-df1%>%
count(ringNo, sort = TRUE)
totalEncounters<-df1%>%
count(ringNo)
names(df1)
totalEncounters <- df1 %>%
count(ringNo, name = "total_counts")
library(dplyr)
totalEncounters <- df1 %>%
count(ringNo, name = "total_counts")
packageVersion("dplyr")
totalEncounters <- df1 %>%
dplyr::count(ringNo, name = "total_counts")
View(totalEncounters)
totalEncounters <- df1 %>%
dplyr::count(ringNo, name = "total_counts", sort=TRUE)
View(totalEncounters)
totalEncountersGT <- df1 %>%
dplyr::filter(species == "GRETI")%>%
dplyr::count(ringNo, name = "total_counts", sort=TRUE)
dfGT <- df1 %>%
filter(species == "GRETI" & (pitType == "N" | pitType == "A"))%>%  # & because there are two separate columns, | because there are multiple values within the same column
select(species, date, ringNo, age, sex, weight, wing, initials, pittagNo, pitType, ringType)%>%
arrange(ringNo)
View(dfGT)
dfBT<-df1%>%
filter(species=="BLUTI" & (pitType == "N" | pitType == "A"))%>%
select(species, date, ringNo, age, sex, weight, wing, initials,pittagNo, pitType, ringType)%>%
arrange(ringNo)
totalEncountersGT <- df1 %>%
dplyr::filter(species == "GRETI")%>%
dplyr::count(ringNo, name = "total_counts")%>%
dplyr::arrange(ringNo)
totalEncountersBT <- df1 %>%
dplyr::filter(species == "BLUTI")%>%
dplyr::count(ringNo, name = "total_counts")%>%
dplyr::arrange(ringNo)
totalEncountersBT <- df1 %>%
dplyr::filter(species == "BLUTI")%>%
dplyr::count(ringNo, name = "total_counts")%>%
dplyr::arrange(ringNo)%>%
dplyr::filter(total_counts>1)
View(totalEncountersBT)
totalEncountersGT <- df1 %>%
dplyr::filter(species == "GRETI")%>%
dplyr::count(ringNo, name = "total_counts")%>%
dplyr::arrange(ringNo)%>%
dplyr::filter(total_counts>1)
View(totalEncountersGT)
View(totalEncountersBT)
View(totalEncountersGT)
View(totalEncountersBT)
dfGTCounts<- merge(dfGT, totalEncountersGT , by = "ringNo", all.x = TRUE)
View(dfGTCounts)
dfBTCounts<- merge(dfBT, totalEncountersBT , by = "ringNo", all.x = TRUE)
date<-df1%>%
arrange(date)
View(date)
date <- df1 %>%
mutate(date = as.Date(date, format = "%d-%m-%Y"))
class(date$date)
date <- df1 %>%
mutate(date = as.POSIXct(date, format = "%d-%m-%Y"))
class(date$date)
arrange(date)
date <- date %>%
arrange(date)
View(date)
df <- df1 %>%
mutate(date = as.Date(date, format = "%Y/%m/%d"))
View(df)
df <- df1 %>%
mutate(date = as.Date(date, format = "%Y/%m/%d"))
View(df)
View(df1)
df <- df1 %>%
mutate(date = as.Date(date, format = "%d/%m/%Y"))
View(date)
View(df1)
df <- df1 %>%
mutate(date = as.Date(date, format = "%d/%m/%Y"))
View(df)
df1 <- df1 %>%
mutate(date = as.Date(date, format = "%d/%m/%Y"))%>%
arrange(date)
View(df1)
df1 <- df1 %>%
mutate(date = as.Date(date, format = "%d/%m/%Y"))%>%
arrange(desc(date))
df_first_occurrence <- df1 %>%
group_by(ringNo) %>%
slice_head(n = 1) %>%
ungroup()
View(df_first_occurrence)
df_first_occurrence <- df1 %>%
group_by(ringNo) %>%
slice_head(n = 1) %>%
ungroup()%>%
select(ringNo, date)
View(df_first_occurrence)
colnames(df_first_occurrence)[colnames(df_first_occurrence) == "date"] <- "lastSighting"
View(df_first_occurrence)
dfBTCountsSightings<- merge(dfBTCounts, df_first_occurrence , by = "ringNo", all.x = TRUE)
View(dfBTCountsSightings)
test<- merge(totalEncountersGT, df_first_occurrence , by = "ringNo", all.x = TRUE)
View(test)
totalEncountersBT<- merge(totalEncountersBT, df_first_occurrence , by = "ringNo", all.x = TRUE)
View(totalEncountersBT)
totalEncountersBT<- merge(totalEncountersBT, df_first_occurrence , by = "ringNo", all.x = TRUE)
View(totalEncountersBT)
totalEncountersGT <- df1 %>%
dplyr::filter(species == "GRETI")%>%
dplyr::count(ringNo, name = "total_counts")%>%
dplyr::arrange(ringNo)%>%
dplyr::filter(total_counts>1)
totalEncountersBT <- df1 %>%
dplyr::filter(species == "BLUTI")%>%
dplyr::count(ringNo, name = "total_counts")%>%
dplyr::arrange(ringNo)%>%
dplyr::filter(total_counts>1)
totalEncountersGT<- merge(totalEncountersGT, df_first_occurrence , by = "ringNo", all.x = TRUE)
totalEncountersBT<- merge(totalEncountersBT, df_first_occurrence , by = "ringNo", all.x = TRUE)
View(totalEncountersBT)
View(dfGT)
View(dfBTCounts)
View(totalEncountersBT)
dfGT_toSubmit<- merge(dfGT, totalEncountersGT , by = "ringNo", all.x = TRUE)
dfBTtoSubmit<- merge(dfBT, totalEncountersBT , by = "ringNo", all.x = TRUE)
View(dfGT_toSubmit)
View(dfBTtoSubmit)
dfBT_toSubmit<- merge(dfBT, totalEncountersBT , by = "ringNo", all.x = TRUE)
path_out = 'F:/RWorkspace/GitHub/BTO-special-methods-report'
write.csv(dfGT_toSubmit, file.path(path_out,'great_tit_to_submit_2024.csv'), row.names = F)
write.csv(dfBT_toSubmit, file.path(path_out,'blue_tit_to_submit_2024.csv'), row.names = F)
class(dfBT_toSubmit$date)
dfGT_toSubmit <- ddfGT_toSubmit %>%
mutate(date = as.Date(date, format = "%d/%m/%Y"))%>%
arrange(date)
dfGT_toSubmit <- dfGT_toSubmit %>%
mutate(date = as.Date(date, format = "%d/%m/%Y"))%>%
arrange(date)
View(dfGT_toSubmit)
dfBT_toSubmit<- merge(dfBT, totalEncountersBT , by = "ringNo", all.x = TRUE)
dfBT_toSubmit <- dfBT_toSubmit %>%
mutate(date = as.Date(date, format = "%d/%m/%Y"))%>%
arrange(date)
write.csv(dfGT_toSubmit, file.path(path_out,'great_tit_to_submit_2024.csv'), row.names = F)
write.csv(dfBT_toSubmit, file.path(path_out,'blue_tit_to_submit_2024.csv'), row.names = F)
install.packages("EvolutionaryGames")
library(EvolutionaryGames)
ESS(matrix(c(-1,4,0,2), 2, byrow=TRUE),("Hawk", "Dove"))
ESS(matrix(c(-1, 4, 0, 2), 2, byrow=TRUE), c("Hawk", "Dove"))
ESS<-ESS(matrix(c(-1, 4, 0, 2), 2, byrow=TRUE), c("Hawk", "Dove"))
View(ESS)
ESS<-ESS(matrix(c(-4, 12, 0, 2), 2, byrow=TRUE), c("Hawk", "Dove"))
ESS<-ESS(matrix(c(-2, 0, 24, 2), 2, byrow=TRUE), c("Dove", "Hawk"))
ESS<-ESS(matrix(c(5, 0, 5, 0.5), 2, byrow=TRUE), c("Dove", "Hawk"))
ESS<-ESS(matrix(c(10, 0, 20, 7.5), 2, byrow=TRUE), c("Dove", "Hawk"))
View(ESS)
ESS<-ESS(matrix(c(-25, 50, 0, 15), 2, byrow=TRUE), c("Hawk", "Dove"))
ESS<-ESS(matrix(c(7.5, 20, 0, 10), 2, byrow=TRUE), c("Hawk", "Dove"))
ESS<-ESS(matrix(c(7.5, 20, 0, 10), 2, byrow=TRUE), c("Hawk", "Dove"))
ESS<-ESS(matrix(c(50, 50, 0, 10), 2, byrow=TRUE), c("Hawk", "Dove"))
ESS<-ESS(matrix(c(-50, 50, 0, 10), 2, byrow=TRUE), c("Hawk", "Dove"))
ESS<-ESS(matrix(c(-25, 50, 0, 10), 2, byrow=TRUE), c("Hawk", "Dove"))
setwd("F:/RWorkspace/GitHub/stats-tutorial")
set.seed(123)  # ensures the random code is reproducible
# Number of rows
n <- 100
# Create mock data
bird_data <- data.frame(
# Randomly assign age (adult or juvenile)
age = factor(sample(c("adult", "juvenile"), n, replace = TRUE)),
# Randomly assign sex (male or female)
sex = factor(sample(c("male", "female"), n, replace = TRUE)),
# Randomly assign site (4 different sites)
site = factor(sample(1:4, n, replace = TRUE)),
# Generate continuous body_size data (e.g., normally distributed)
body_size = rnorm(n, mean = 50, sd = 10)  # Mean = 50, SD = 10
)
# Now, generate cognition based on the predictors (age, sex, body_size) and their interaction
# We'll add some noise with rnorm() to simulate data
bird_data$cognition <- with(bird_data,
10 + 3*(age == "juvenile") + 2*(sex == "male") +
1.5*(age == "juvenile" & sex == "male") + 0.05*body_size +
rnorm(n, mean = 0, sd = 5))  # Add random noise
# Run the model
# Fit the linear mixed model with age, sex, body_size, and their interaction
model <- lmer(cognition ~ age * sex + body_size + (1 | Site), data = bird_data)
# Install the required packages (if not already installed)
required_packages <- c("tidyverse", "lme4", "MASS", "nlme", "lmerTest", "MuMIn", "ggpubr")
# Install packages that aren't already installed
install_if_needed <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if(length(install_if_needed)) install.packages(install_if_needed)
You can also install each manually using the function install.packages("nameOfPackage")
# Load the packages after installation
library(tidyverse)   # A collection of R packages for data science
library(lme4)        # Provides tools for fitting linear and generalized linear mixed-effects models (GLMMs).
library(MASS)        # A large collection of statistical functions, with a focus on generalized linear models (GLMs).
library(nlme)        # Mixed-effects models, and can fit both linear and nonlinear mixed-effects models (U-shaped, sigmoidal, exponential). Model diagnostic tools.
library(lmerTest)    # Adds p-values to lme4 models
library(MuMIn)       # Model selection & averaging
library(ggplot2)     # Data visualization
library(ggpubr)      # Enhanced ggplot2 functions
library(tidyverse)   # A collection of R packages for data science
library(lme4)        # Provides tools for fitting linear and generalized linear mixed-effects models (GLMMs).
library(MASS)        # A large collection of statistical functions, with a focus on generalized linear models (GLMs).
library(nlme)        # Mixed-effects models, and can fit both linear and nonlinear mixed-effects models (U-shaped, sigmoidal, exponential). Model diagnostic tools.
library(lmerTest)    # Adds p-values to lme4 models
library(MuMIn)       # Model selection & averaging
library(ggplot2)     # Data visualization
library(ggpubr)
library(lme4)        # Provides tools for fitting linear and generalized linear mixed-effects models (GLMMs).
library(MASS)        # A large collection of statistical functions, with a focus on generalized linear models (GLMs).
library(nlme)        # Mixed-effects models, and can fit both linear and nonlinear mixed-effects models (U-shaped, sigmoidal, exponential). Model diagnostic tools.
library(lmerTest)
model <- lmer(cognition ~ age * sex + body_size + (1 | Site), data = bird_data)
model <- lmer(cognition ~ age * sex + body_size + (1 | site), data = bird_data)
# Create mock data
bird_data <- data.frame(
# Randomly assign age (adult or juvenile)
age = factor(sample(c("adult", "juvenile"), n, replace = TRUE)),
# Randomly assign sex (male or female)
sex = factor(sample(c("male", "female"), n, replace = TRUE)),
# Randomly assign site (3 different sites)
site = factor(sample(1:3, n, replace = TRUE)),
# Generate continuous body_size data (e.g., normally distributed)
body_size = rnorm(n, mean = 50, sd = 10)  # Mean = 50, SD = 10
)
# Now, generate cognition based on the predictors (age, sex, body_size) and their interaction
# We'll add some noise with rnorm() to simulate data
bird_data$cognition <- with(bird_data,
10 + 3*(age == "juvenile") + 2*(sex == "male") +
1.5*(age == "juvenile" & sex == "male") + 0.05*body_size +
rnorm(n, mean = 0, sd = 5))  # Add random noise
model <- lmer(cognition ~ age * sex + body_size + (1 | site), data = bird_data)
summary(model)
rm( bird_data)
rm(model)
set.seed(123)  # Ensures the random code is reproducible
# Number of rows
n <- 100
# Create mock data
bird_data <- data.frame(
# Randomly assign age (adult or juvenile)
age = factor(sample(c("adult", "juvenile"), n, replace = TRUE)),
# Randomly assign sex (male or female)
sex = factor(sample(c("male", "female"), n, replace = TRUE)),
# Randomly assign site (3 different sites)
site = factor(sample(1:3, n, replace = TRUE)),
# Generate continuous body_size data (e.g., normally distributed)
body_size = rnorm(n, mean = 50, sd = 10)  # Mean = 50, SD = 10
)
# Now, generate cognition based on the predictors (age, sex, body_size) and their interaction
# We'll add some noise with rnorm() to simulate data
bird_data$cognition <- with(bird_data,
10 + 3*(age == "juvenile") + 2*(sex == "male") +
1.5*(age == "juvenile" & sex == "male") + 0.05*body_size +
rnorm(n, mean = 0, sd = 5))  # Add random noise
model <- lmer(cognition ~ age * sex + body_size + (1 | site), data = bird_data)
summary(model)
rm(model)
rm(bird_data)
set.seed(123)  # Ensures the random code is reproducible
# Number of rows
n <- 100
# Create mock data
bird_data <- data.frame(
# Randomly assign age (adult or juvenile)
age = factor(sample(c("adult", "juvenile"), n, replace = TRUE)),
# Randomly assign sex (male or female)
sex = factor(sample(c("male", "female"), n, replace = TRUE)),
# Randomly assign site (3 different sites)
site = factor(sample(1:3, n, replace = TRUE)),
# Generate continuous body_size data (e.g., normally distributed)
body_size = rnorm(n, mean = 50, sd = 10)  # Mean = 50, SD = 10
)
# Now, generate cognition based on the predictors (age, sex, body_size) and their interaction
# We'll add some noise with rnorm() to simulate data
bird_data$cognition <- with(bird_data,
10 + 3*(age == "juvenile") + 2*(sex == "male") +
1.5*(age == "juvenile" & sex == "male") + 0.05*body_size +
rnorm(n, mean = 0, sd = 5))  # Add random noise
library(lme4) # For the lmer() function
library(lmerTest) # To generate p-values
# Fit the linear mixed model with age, sex, body_size, and their interaction
model <- lmer(cognition ~ age * sex + body_size + (1 | site), data = bird_data)
# Summary of the model
summary(model)
bird_data$correct_choice <- ifelse(bird_data$cognition > 15, 1, 0)
head(bird_data)
# Run the model
# Fit a mixed-effects logistic regression model
model2 <- glmer(correct_choice ~ age * sex + body_size + (1 | site), family = binomial(link = "logit"), data = bird_data)
# Check the summary of the model
summary(model2)
model2 <- glmer(correct_choice ~ age + sex + body_size + (1 | site), family = binomial(link = "logit"), data = bird_data)
summary(model2)
library(knitr)
# Fixed Effects Table
fixed_effects <- data.frame(
Term = c("(Intercept)", "age (juvenile)", "sex (male)", "body size", "age × sex interaction"),
Estimate = c(12.99, 3.25, 1.98, -0.0089, 0.71),
`Std. Error` = c(2.45, 1.34, 1.30, 0.045, 1.98),
df = c(84.69, 93.38, 94.16, 94.74, 94.20),
`t value` = c(5.30, 2.42, 1.53, -0.198, 0.357),
`p value` = c(9.07e-07, 0.0173, 0.1304, 0.8434, 0.7221)
)
kable(fixed_effects, digits = 3, caption = "Fixed Effects from LMM")
library(knitr)
library(kableExtra)
install.packages("kableExtra")
library(knitr)
library(kableExtra)
# Fixed Effects Table
fixed_effects <- data.frame(
Term = c("(Intercept)", "age (juvenile)", "sex (male)", "body size", "age × sex interaction"),
Estimate = c(12.99, 3.25, 1.98, -0.0089, 0.71),
`Std. Error` = c(2.45, 1.34, 1.30, 0.045, 1.98),
df = c(84.69, 93.38, 94.16, 94.74, 94.20),
`t value` = c(5.30, 2.42, 1.53, -0.198, 0.357),
`p value` = c(9.07e-07, 0.0173, 0.1304, 0.8434, 0.7221)
)
kable(fixed_effects, digits = 3, caption = "Table 1: Fixed Effects from LMM") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "bordered"))
